<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 */

/**
 * main function
 *
 */
function gmap_admin_main()
{
    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $pnRender = pnRender::getInstance('gmap', false);

    $pnRender->assign('items',    pnModAPIFunc('gmap', 'user', 'getall', array()));
    $pnRender->assign('specials', pnModAPIFunc('gmap', 'user', 'getall', array('special' => true)));

    return $pnRender->fetch('gmap_admin_main.html');
}

/**
 * configuration
 *
 */
function gmap_admin_config()
{
    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    Loader::requireOnce('modules/gmap/pnincludes/gm_admin_modifyconfighandler.class.php');

    // Create output object
    $pnf = FormUtil::newpnForm('gmap');

    // Return the output that has been generated by this function
    return $pnf->pnFormExecute('gmap_admin_config.html', new gmap_admin_modifyconfighandler());
}

/**
 * modify an existing special marker
 *
 */
function gmap_admin_modify()
{
    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $mid      = (int)FormUtil::getPassedValue('mid', -1, 'GETPOST');
    if ($mid == -1) {
        return LogUtil::registerError(_GM_ILLEGALMARKERID, null, pnModURL('gmap', 'admin', 'main'));
    }

    $item = pnModAPIFunc('gmap', 'user', 'get', array('objectid' => $mid));
    if (!$item) {
        return LogUtil::registerError(_GM_NOSUCHMARKER, null, pnModURL('gmap', 'admin', 'main'));
    }

    if ($item['uid'] > 1) {
        // user marker
        $iconlist      = pnModGetVar('gmap','markerpinlist');
        $ifolder       = 'modules/gmap/pnimages';
        $item['title'] = pnUserGetVar('uname', $item['uid']);
    } else {
        // special marker
        $iconlist  = pnModGetVar('gmap','specialpinlist');
        $ifolder   = 'modules/gmap/pnimages/specials';
    }
    
    $icons = array();
    foreach ($iconlist as $icon => $iconinfo) {
        if ( $iconinfo['active'] != 0 ) {
            $icons[$icon] = $iconinfo['name'];
        }
    }

    PageUtil::addVar('javascript', 'javascript/ajax/prototype.js');
    PageUtil::addVar('javascript', 'modules/gmap/pnjavascript/googlemap.js');

    $pnRender = pnRender::getInstance('gmap', false);
    $pnRender->assign('icons',   $icons);
    $pnRender->assign('ifolder', $ifolder);
    $pnRender->assign($item);

    return $pnRender->fetch('gmap_admin_modify.html');
}

/**
 * updated a marker
 *
 */
function gmap_admin_update()
{
    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $args['uid']   = FormUtil::getPassedValue('uid');
    $args['mid']   = FormUtil::getPassedValue('mid', -1, 'POST');
    $args['title'] = FormUtil::getPassedValue('title');
    $args['long']  = FormUtil::getPassedValue('longitude');
    $args['lat']   = FormUtil::getPassedValue('latitude');
    $args['msg']   = FormUtil::getPassedValue('msg');
    $args['icon']  = FormUtil::getPassedValue('icon');

    $action = FormUtil::getPassedValue('action');

    if (empty($args['long']) || empty($args['lat'])) {
        return LogUtil::registerError(_GM_WRONGCOORDINATES, null, pnModURL('gmap', 'admin', 'main'));
    }

    // we supply no action parameter for updating as this is the default in the update function
    $result = pnModAPIFunc('gmap', 'user', 'update', $args);

    if ($result == false) {
        LogUtil::registerError(_GM_UPDATEERROR);
    } else {
        LogUtil::registerStatus(_GM_COORDSUPDATED);
    }
    return pnRedirect(pnModURL('gmap', 'admin', 'main'));
}

/**
 * delete a marker
 *
 */
function gmap_admin_delete()
{
   if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $mid     = (int)FormUtil::getPassedValue('mid', -1, 'GETPOST');
    $confirm = FormUtil::getPassedValue('confirm', 0, 'GETPOST');
    $submit  = FormUtil::getPassedValue('submit', '', 'GETPOST');

    if ($mid == -1) {
        return LogUtil::registerError(_GM_ILLEGALMARKERID, null, pnModURL('gmap', 'admin', 'main'));
    }

    if (!empty($submit)) {
        if ($confirm==1) {
            if (pnModAPIFunc('gmap', 'admin', 'delete', array('mid' => $mid))) {
                LogUtil::registerStatus(_GM_MARKERDELETED);
                return pnRedirect(pnModURL('gmap', 'admin', 'main'));
            } else {
                return LogUtil::registerError(_GM_ERRORDELETINGMARKER, null, pnModURL('gmap', 'admin', 'main'));
            }
        } else {
            return LogUtil::registerError(_GM_MUSTCONFIRM, null, pnModURL('gmap', 'admin', 'delete', array('mid' => $mid)));
        }
    }

    $item = pnModAPIFunc('gmap', 'user', 'get', array('objectid' => $mid));
    if (!$item) {
        return LogUtil::registerError(_GM_NOSUCHMARKER, null, pnModURL('gmap', 'admin', 'main'));
    }
    if ($item['uid'] == -1) {
        $item['icon'] = 'specials/'. DataUtil::formatforOS($item['icon']);
    }

    $pnRender = pnRender::getInstance('gmap', false);
    $pnRender->assign($item);
    return $pnRender->fetch('gmap_admin_delete.html');
}

/**
 * readpins
 *
 *
 */
function gmap_admin_readpins() {

    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $submit = FormUtil::getPassedValue('submit', null, 'POST');

    if(!$submit) {
        $pnr = pnRender::getInstance('gmap', false, null, true);
        return $pnr->fetch('gmap_admin_readpins.html');
    }
    // submit is set - update the Pins
    $forcereload = FormUtil::getPassedValue('forcereload', 0, 'POST');
    $forcereload = ($forcereload==1) ? true : false;
    // @see adminapi.php#gmap_adminapi_updatepins()
    pnModAPIFunc('gmap', 'admin', 'updatepins', array('forcereload' => $forcereload));
    LogUtil::registerStatus(_GM_ADMIN_PINSREADFROMFILESYSTEM);
    return pnRedirect(pnModURL('gmap', 'admin', 'editpins'));
}

/**
 * editpins
 *
 *
 */
function gmap_admin_editpins() {

    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $submit = FormUtil::getPassedValue('submit', null, 'POST');

    if(!$submit) {
        $pnr = pnRender::getInstance('gmap', false, null, true);
        $specialpinlist = pnModGetVar('gmap','specialpinlist');
        $markerpinlist  = pnModGetVar('gmap','markerpinlist');
        $pnr->assign('specialpinlist',$specialpinlist);
        $pnr->assign('markerpinlist', $markerpinlist); 
        return $pnr->fetch('gmap_admin_editpins.html');
    }
    // submit is set
    // Get input
    $icons   = FormUtil::getPassedValue('icon',   array(), 'POST');
    $names   = FormUtil::getPassedValue('name',   array(), 'POST');
    $active  = FormUtil::getPassedValue('active', array(), 'POST');
    
    $markers       = FormUtil::getPassedValue('marker',       array(), 'POST');
    $markernames   = FormUtil::getPassedValue('markername',   array(), 'POST');
    $markeractive  = FormUtil::getPassedValue('markeractive', array(), 'POST');    

    $specialpinlist = array();
    // Create an array with the input and deactivate all pins
    for($i = 0; $i < sizeof($icons); $i++) {
        $specialpinlist[$icons[$i]] = array(  'name'   => $names[$i],
                                              'active' => 0
                                            );
    }
    // And now set the active flag for all selected special marker pins
    for ($i = 0; $i < sizeof($active); $i++) {
  	    $specialpinlist[$active[$i]]['active'] = 1;
    }


    $markerpinlist = array();
    // Create an array with the input and deactivate all pins
    for($i = 0; $i < sizeof($markers); $i++) {
        $markerpinlist[$markers[$i]] = array(  'name'   => $markernames[$i],
                                               'active' => 0
                                            );
    }
    // And now set the active flag for all selected markers
    for ($i = 0; $i < sizeof($markeractive); $i++) {
  	    $markerpinlist[$markeractive[$i]]['active'] = 1;
    }

   pnModSetVar('gmap','specialpinlist', $specialpinlist);
   pnModSetVar('gmap','markerpinlist',  $markerpinlist);   

   LogUtil::registerStatus(_GM_ADMIN_EDITEDPINSSAVED);
   return pnRedirect(pnModURL('gmap', 'admin', 'editpins'));
}


/**
 * editmaps
 *
 *
 */
function gmap_admin_editmaps() {

    if (!SecurityUtil::checkPermission('gmap::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError(pnConfigGetVar('entrypoint', 'index.php'));
    }

    $submit = FormUtil::getPassedValue('submit', null, 'POST');

    if(!$submit) {

        $maplist = pnModGetVar('gmap','maplist');
        $basedirectory = dirname(dirname(dirname(dirname(realpath(__FILE__))))) . "/";
 
        $pnr = pnRender::getInstance('gmap', false, null, true); 
        $pnr->assign('maplist',$maplist);
        $pnr->assign('basedirectory',$basedirectory);
        return $pnr->fetch('gmap_admin_editmaps.html');
    }
    // submit is set
    // Get input
    $gmapfile  = FormUtil::getPassedValue('gmapfile', "", 'POST');
    $names     = FormUtil::getPassedValue('name',     array(), 'POST');
    $filenames = FormUtil::getPassedValue('filename', array(), 'POST');
    $delete    = FormUtil::getPassedValue('delete',   array(), 'POST');
    
    $maplist = array();
    for($i = 0; $i < sizeof($names); $i++) {
        if ( $names[$i] ) {
            $maplist[$names[$i]] = $filenames[$i];
        }
    }
            
    // Deletions
    for ($i = 0; $i < sizeof($delete); $i++) {
  	    unset($maplist[$delete[$i]]);
    }

   pnModSetVar('gmap','maplist',  $maplist);
   pnModSetVar('gmap','gmapfile', $gmapfile);       // Closes Ticket #4

   LogUtil::registerStatus(_GM_ADMIN_EDITEDMAPSSSAVED);
   return pnRedirect(pnModURL('gmap', 'admin', 'editmaps'));
}
